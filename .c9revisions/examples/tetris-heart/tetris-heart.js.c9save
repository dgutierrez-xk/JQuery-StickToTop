{"ts":1353584253835,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"(function(document, $, M) {\r\n  \"use strict\";\r\n\r\n  var shapes = {\r\n    square: [[1,1],[1,1]],\r\n    stepLeft: [[0,1,1],[1,1,0]],\r\n    stepRight: [[1,1,0],[0,1,1]],\r\n    t: [[0,1,0],[1,1,1]],\r\n    longL: [[1,1,1,1]],\r\n    lRight: [[1, 1, 1], [0, 0, 1]],\r\n    lLeft: [[0, 0, 1], [1, 1, 1]],\r\n    smallL: [[1, 1], [0, 1]]\r\n  },\r\n  colors = {\r\n    square: '#78CB45',\r\n    stepLeft: '#CECF49',\r\n    stepRight: '#CF44A1',\r\n    t: '#4C7CC7',\r\n    longL: '#C64747',\r\n    lLeft: '#48C7C7',\r\n    lRight: '#C77D48',\r\n    smallL: '#C77D48'\r\n  },\r\n  BLOCK_SIZE = 25,\r\n\r\n  Block = function(shape, color, options) {\r\n    \r\n    if (typeof shape !== 'object' || !shape ||\r\n        typeof color !== 'string' || !color) {\r\n      throw new TypeError('Invalid Constructor');\r\n    }\r\n\r\n    // Private\r\n    var rotation = 0;\r\n\r\n    // Members    \r\n    this.canvas = document.createElement('canvas');\r\n    this.context = this.canvas.getContext('2d');\r\n    this.shape = shape;\r\n    this.color = color;\r\n    this.options = options || {};\r\n\r\n    // Methods\r\n    this.initialize = function() {\r\n      this.options = $.extend({\r\n        blockSize: BLOCK_SIZE,\r\n        css: null\r\n      }, this.options)\r\n\r\n      var dimension = Math.max(this.shape[0].length, this.shape.length);\r\n\r\n      this.canvas.height = this.options.blockSize * dimension;\r\n      this.canvas.width = this.options.blockSize * dimension;\r\n\r\n      if (this.options.css) {\r\n        $(this.canvas).css(this.options.css);\r\n      }\r\n\r\n      if (this.options.rotate) {\r\n        this.rotate(rotate);\r\n      }\r\n\r\n      return this;\r\n    }\r\n\r\n    this.draw = function() {\r\n      var ctx = this.context,\r\n      shape = this.shape,\r\n      color = this.color,\r\n      i = shape.length,\r\n      blockSize = this.options.blockSize,\r\n\r\n      drawBlock = function(x, y, color) {\r\n        ctx.beginPath();\r\n        \r\n        ctx.fillStyle = color;\r\n        ctx.fillRect(x, y, blockSize, blockSize);\r\n        \r\n        var lingrad = ctx.createLinearGradient(0, 0, blockSize + x, blockSize + y);  \r\n        lingrad.addColorStop(0, '#DAF1CB');\r\n        lingrad.addColorStop(1, color);  \r\n        \r\n        ctx.fillStyle = lingrad;\r\n        ctx.rect(x + 2, y + 2, blockSize - 4, blockSize - 4);\r\n        ctx.fill();\r\n        \r\n        ctx.closePath();\r\n      }\r\n            \r\n      while (i--) {\r\n        var row = shape[i],\r\n        j = row.length;\r\n        \r\n        while (j--) {\r\n          if (row[j]) {\r\n            drawBlock(blockSize * i, blockSize * j, color);\r\n          }\r\n        }\r\n      }\r\n\r\n      return this;\r\n    };\r\n\r\n    this.rotate = function(deg) {\r\n      var canvas = this.canvas;\r\n      rotation += deg;\r\n      \r\n      canvas.style[M.prefixed('Transform')] = 'rotate('+rotation+'deg)';\r\n      return this;\r\n    };\r\n\r\n\r\n    // \"Main\"\r\n    this.canvas.block = this;\r\n    this.initialize();\r\n  }\r\n\r\n  $(function() {\r\n    if (!M.canvas || !M.csstransforms) {\r\n      throw new Error('Your browser does not support CSS3 transforms or Canvas.');\r\n    }\r\n\r\n    var parent = document.body,\r\n    blocks = [\r\n      {shape: shapes.stepRight, color: colors.stepRight ,coord: {x:1,  y:0}, rotation: 90},\r\n      {shape: shapes.t, color: colors.t                 ,coord: {x:3,  y:0}, rotation: 90},\r\n      {shape: shapes.square, color: colors.square       ,coord: {x:8,  y:0}, rotation: 0},\r\n      {shape: shapes.lLeft, color: colors.lLeft         ,coord: {x:9, y:0}, rotation: 0},\r\n      {shape: shapes.t, color: colors.t                 ,coord: {x:6,  y:1}, rotation: 90},\r\n      {shape: shapes.stepRight, color: colors.stepRight ,coord: {x:11,  y:1}, rotation: 0},\r\n      {shape: shapes.lRight, color: colors.lRight       ,coord: {x:0,  y:2}, rotation: 0},\r\n      {shape: shapes.square, color: colors.square       ,coord: {x:1,  y:2}, rotation: 0},\r\n      {shape: shapes.lRight, color: colors.lRight       ,coord: {x:2,  y:2}, rotation: 180},\r\n      {shape: shapes.stepRight, color: colors.stepRight ,coord: {x:4,  y:2}, rotation: 180},\r\n      {shape: shapes.longL, color: colors.longL         ,coord: {x:7,  y:3}, rotation: 90},\r\n      {shape: shapes.t, color: colors.t                 ,coord: {x:10,  y:3}, rotation: 90},\r\n      {shape: shapes.stepLeft, color: colors.stepLeft   ,coord: {x:1,  y:4}, rotation: 0},\r\n      {shape: shapes.longL, color: colors.longL         ,coord: {x:3,  y:3}, rotation: 0},\r\n      {shape: shapes.stepLeft, color: colors.stepLeft   ,coord: {x:4,  y:4}, rotation: 0},\r\n      {shape: shapes.t, color: colors.t                 ,coord: {x:5,  y:5}, rotation: 90},\r\n      {shape: shapes.lLeft, color: colors.lLeft         ,coord: {x:7,  y:3}, rotation: 270},\r\n      {shape: shapes.stepLeft, color: colors.stepLeft   ,coord: {x:7,  y:5}, rotation: 90},\r\n      {shape: shapes.square, color: colors.square       ,coord: {x:10,  y:5}, rotation: 0},\r\n      {shape: shapes.lLeft, color: colors.lLeft         ,coord: {x:2,  y:6}, rotation: 90},\r\n      {shape: shapes.stepRight, color: colors.stepRight ,coord: {x:4,  y:7}, rotation: 90},\r\n      {shape: shapes.longL, color: colors.longL         ,coord: {x:7,  y:7}, rotation: 90},\r\n      {shape: shapes.t, color: colors.t                 ,coord: {x:6,  y:7}, rotation: 270},\r\n      {shape: shapes.smallL, color: colors.smallL       ,coord: {x:5,  y:9}, rotation: 180}\r\n    ], l = blocks.length;\r\n    \r\n    while (l--) {\r\n      var blockData = blocks[l],\r\n      block = new Block(blockData.shape, blockData.color),\r\n      randY = Math.round((Math.random() * 100) + 8),\r\n      canvas = block.canvas;\r\n\r\n      canvas.style.left = blockData.coord.x * BLOCK_SIZE;\r\n      canvas.style.top = randY * BLOCK_SIZE;\r\n      \r\n      canvas.addEventListener('click', function(e) {\r\n        this.block.rotate(90);\r\n        e.preventDefault();\r\n      });\r\n\r\n      block.rotate(blockData.rotation).draw();      \r\n      parent.appendChild(canvas);\r\n\r\n      $(block.canvas).stickToTop({offset: {top: blockData.coord.y * BLOCK_SIZE}});\r\n    }\r\n\r\n    document.body.style.height = \"3900px\";\r\n  });\r\n\r\n}(window.document, jQuery.noConflict(), Modernizr));"]],"start1":0,"start2":0,"length1":0,"length2":6027}]],"length":6027}
{"contributors":[],"silentsave":false,"ts":1353584281516,"patch":[[{"diffs":[[0,"CK_SIZE}"],[1,", preserveLayout: false"],[0,"});\r\n   "]],"start1":5900,"start2":5900,"length1":16,"length2":39}]],"length":6050,"saved":false}
